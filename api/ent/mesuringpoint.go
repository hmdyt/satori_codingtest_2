// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hmdyt/satori_codingtest-2/ent/mesuringpoint"
)

// MesuringPoint is the model entity for the MesuringPoint schema.
type MesuringPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// BodyMass holds the value of the "body_mass" field.
	BodyMass float64 `json:"body_mass,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MesuringPoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mesuringpoint.FieldBodyMass:
			values[i] = new(sql.NullFloat64)
		case mesuringpoint.FieldID, mesuringpoint.FieldUserID:
			values[i] = new(sql.NullInt64)
		case mesuringpoint.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MesuringPoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MesuringPoint fields.
func (mp *MesuringPoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mesuringpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int(value.Int64)
		case mesuringpoint.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				mp.UserID = int(value.Int64)
			}
		case mesuringpoint.FieldBodyMass:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field body_mass", values[i])
			} else if value.Valid {
				mp.BodyMass = value.Float64
			}
		case mesuringpoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MesuringPoint.
// Note that you need to call MesuringPoint.Unwrap() before calling this method if this MesuringPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MesuringPoint) Update() *MesuringPointUpdateOne {
	return (&MesuringPointClient{config: mp.config}).UpdateOne(mp)
}

// Unwrap unwraps the MesuringPoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MesuringPoint) Unwrap() *MesuringPoint {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MesuringPoint is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MesuringPoint) String() string {
	var builder strings.Builder
	builder.WriteString("MesuringPoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.UserID))
	builder.WriteString(", ")
	builder.WriteString("body_mass=")
	builder.WriteString(fmt.Sprintf("%v", mp.BodyMass))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MesuringPoints is a parsable slice of MesuringPoint.
type MesuringPoints []*MesuringPoint

func (mp MesuringPoints) config(cfg config) {
	for _i := range mp {
		mp[_i].config = cfg
	}
}
