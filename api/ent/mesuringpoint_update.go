// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hmdyt/satori_codingtest-2/ent/mesuringpoint"
	"github.com/hmdyt/satori_codingtest-2/ent/predicate"
)

// MesuringPointUpdate is the builder for updating MesuringPoint entities.
type MesuringPointUpdate struct {
	config
	hooks    []Hook
	mutation *MesuringPointMutation
}

// Where appends a list predicates to the MesuringPointUpdate builder.
func (mpu *MesuringPointUpdate) Where(ps ...predicate.MesuringPoint) *MesuringPointUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetUserID sets the "user_id" field.
func (mpu *MesuringPointUpdate) SetUserID(i int) *MesuringPointUpdate {
	mpu.mutation.ResetUserID()
	mpu.mutation.SetUserID(i)
	return mpu
}

// AddUserID adds i to the "user_id" field.
func (mpu *MesuringPointUpdate) AddUserID(i int) *MesuringPointUpdate {
	mpu.mutation.AddUserID(i)
	return mpu
}

// SetBodyMass sets the "body_mass" field.
func (mpu *MesuringPointUpdate) SetBodyMass(f float64) *MesuringPointUpdate {
	mpu.mutation.ResetBodyMass()
	mpu.mutation.SetBodyMass(f)
	return mpu
}

// AddBodyMass adds f to the "body_mass" field.
func (mpu *MesuringPointUpdate) AddBodyMass(f float64) *MesuringPointUpdate {
	mpu.mutation.AddBodyMass(f)
	return mpu
}

// SetCreatedAt sets the "created_at" field.
func (mpu *MesuringPointUpdate) SetCreatedAt(t time.Time) *MesuringPointUpdate {
	mpu.mutation.SetCreatedAt(t)
	return mpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpu *MesuringPointUpdate) SetNillableCreatedAt(t *time.Time) *MesuringPointUpdate {
	if t != nil {
		mpu.SetCreatedAt(*t)
	}
	return mpu
}

// Mutation returns the MesuringPointMutation object of the builder.
func (mpu *MesuringPointUpdate) Mutation() *MesuringPointMutation {
	return mpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MesuringPointUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mpu.hooks) == 0 {
		if err = mpu.check(); err != nil {
			return 0, err
		}
		affected, err = mpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MesuringPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpu.check(); err != nil {
				return 0, err
			}
			mpu.mutation = mutation
			affected, err = mpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mpu.hooks) - 1; i >= 0; i-- {
			if mpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MesuringPointUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MesuringPointUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MesuringPointUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MesuringPointUpdate) check() error {
	if v, ok := mpu.mutation.UserID(); ok {
		if err := mesuringpoint.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MesuringPoint.user_id": %w`, err)}
		}
	}
	if v, ok := mpu.mutation.BodyMass(); ok {
		if err := mesuringpoint.BodyMassValidator(v); err != nil {
			return &ValidationError{Name: "body_mass", err: fmt.Errorf(`ent: validator failed for field "MesuringPoint.body_mass": %w`, err)}
		}
	}
	return nil
}

func (mpu *MesuringPointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mesuringpoint.Table,
			Columns: mesuringpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mesuringpoint.FieldID,
			},
		},
	}
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.UserID(); ok {
		_spec.SetField(mesuringpoint.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mpu.mutation.AddedUserID(); ok {
		_spec.AddField(mesuringpoint.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mpu.mutation.BodyMass(); ok {
		_spec.SetField(mesuringpoint.FieldBodyMass, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.AddedBodyMass(); ok {
		_spec.AddField(mesuringpoint.FieldBodyMass, field.TypeFloat64, value)
	}
	if value, ok := mpu.mutation.CreatedAt(); ok {
		_spec.SetField(mesuringpoint.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mesuringpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MesuringPointUpdateOne is the builder for updating a single MesuringPoint entity.
type MesuringPointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MesuringPointMutation
}

// SetUserID sets the "user_id" field.
func (mpuo *MesuringPointUpdateOne) SetUserID(i int) *MesuringPointUpdateOne {
	mpuo.mutation.ResetUserID()
	mpuo.mutation.SetUserID(i)
	return mpuo
}

// AddUserID adds i to the "user_id" field.
func (mpuo *MesuringPointUpdateOne) AddUserID(i int) *MesuringPointUpdateOne {
	mpuo.mutation.AddUserID(i)
	return mpuo
}

// SetBodyMass sets the "body_mass" field.
func (mpuo *MesuringPointUpdateOne) SetBodyMass(f float64) *MesuringPointUpdateOne {
	mpuo.mutation.ResetBodyMass()
	mpuo.mutation.SetBodyMass(f)
	return mpuo
}

// AddBodyMass adds f to the "body_mass" field.
func (mpuo *MesuringPointUpdateOne) AddBodyMass(f float64) *MesuringPointUpdateOne {
	mpuo.mutation.AddBodyMass(f)
	return mpuo
}

// SetCreatedAt sets the "created_at" field.
func (mpuo *MesuringPointUpdateOne) SetCreatedAt(t time.Time) *MesuringPointUpdateOne {
	mpuo.mutation.SetCreatedAt(t)
	return mpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpuo *MesuringPointUpdateOne) SetNillableCreatedAt(t *time.Time) *MesuringPointUpdateOne {
	if t != nil {
		mpuo.SetCreatedAt(*t)
	}
	return mpuo
}

// Mutation returns the MesuringPointMutation object of the builder.
func (mpuo *MesuringPointUpdateOne) Mutation() *MesuringPointMutation {
	return mpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MesuringPointUpdateOne) Select(field string, fields ...string) *MesuringPointUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MesuringPoint entity.
func (mpuo *MesuringPointUpdateOne) Save(ctx context.Context) (*MesuringPoint, error) {
	var (
		err  error
		node *MesuringPoint
	)
	if len(mpuo.hooks) == 0 {
		if err = mpuo.check(); err != nil {
			return nil, err
		}
		node, err = mpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MesuringPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpuo.check(); err != nil {
				return nil, err
			}
			mpuo.mutation = mutation
			node, err = mpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpuo.hooks) - 1; i >= 0; i-- {
			if mpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MesuringPoint)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MesuringPointMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MesuringPointUpdateOne) SaveX(ctx context.Context) *MesuringPoint {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MesuringPointUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MesuringPointUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MesuringPointUpdateOne) check() error {
	if v, ok := mpuo.mutation.UserID(); ok {
		if err := mesuringpoint.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MesuringPoint.user_id": %w`, err)}
		}
	}
	if v, ok := mpuo.mutation.BodyMass(); ok {
		if err := mesuringpoint.BodyMassValidator(v); err != nil {
			return &ValidationError{Name: "body_mass", err: fmt.Errorf(`ent: validator failed for field "MesuringPoint.body_mass": %w`, err)}
		}
	}
	return nil
}

func (mpuo *MesuringPointUpdateOne) sqlSave(ctx context.Context) (_node *MesuringPoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mesuringpoint.Table,
			Columns: mesuringpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mesuringpoint.FieldID,
			},
		},
	}
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MesuringPoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mesuringpoint.FieldID)
		for _, f := range fields {
			if !mesuringpoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mesuringpoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.UserID(); ok {
		_spec.SetField(mesuringpoint.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mpuo.mutation.AddedUserID(); ok {
		_spec.AddField(mesuringpoint.FieldUserID, field.TypeInt, value)
	}
	if value, ok := mpuo.mutation.BodyMass(); ok {
		_spec.SetField(mesuringpoint.FieldBodyMass, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.AddedBodyMass(); ok {
		_spec.AddField(mesuringpoint.FieldBodyMass, field.TypeFloat64, value)
	}
	if value, ok := mpuo.mutation.CreatedAt(); ok {
		_spec.SetField(mesuringpoint.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &MesuringPoint{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mesuringpoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
